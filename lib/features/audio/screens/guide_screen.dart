import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:lao_instruments/generated/locale_keys.g.dart';
import 'package:lao_instruments/routers/app_router.dart';
import 'package:lao_instruments/theme/app_colors.dart';

@RoutePage()
class GuideScreen extends StatefulWidget {
  const GuideScreen({super.key});

  @override
  State<GuideScreen> createState() => _GuideScreenState();
}

class _GuideScreenState extends State<GuideScreen> with TickerProviderStateMixin {
  late TabController _tabController;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  int _currentTutorialStep = 0;
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);
    _animationController.forward();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.lightGrey,
      appBar: AppBar(
        title: Text(LocaleKeys.guide_title.tr()),
        backgroundColor: AppColors.primaryBlue,
        elevation: 0,
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          tabs: [
            Tab(
              icon: const Icon(Icons.school),
              text: LocaleKeys.guide_tutorial_title.tr(),
            ),
            Tab(
              icon: const Icon(Icons.help_outline),
              text: LocaleKeys.guide_faq_title.tr(),
            ),
          ],
        ),
      ),
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: TabBarView(
          controller: _tabController,
          children: [
            _buildTutorialTab(),
            _buildFaqTab(),
          ],
        ),
      ),
    );
  }

  Widget _buildTutorialTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          _buildInteractiveGuide(),
          const SizedBox(height: 20),
          _buildRecordVsImportChoice(),
          const SizedBox(height: 20),
          _buildInternetRequirementCard(),
          const SizedBox(height: 20),
          _buildBestPracticesCard(),
        ],
      ),
    );
  }

  Widget _buildInteractiveGuide() {
    final steps = [
      {
        'icon': Icons.wifi,
        'title': '‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î',
        'description': '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡∫Å‡ªà‡∫≠‡∫ô‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô',
        'details': '‡ªÅ‡∫≠‡∫±‡∫ö‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫™‡∫ª‡ªà‡∫á‡∫™‡∫Ω‡∫á‡ªÑ‡∫õ‡∫´‡∫≤ AI server ‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞. WiFi ‡∫´‡∫º‡∫∑ Mobile Data ‡∫ó‡∫±‡∫á‡∫Ñ‡∫π‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫î‡ªâ.',
        'color': Colors.blue,
        'image': 'üì∂',
      },
      {
        'icon': Icons.mic,
        'title': '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫Ω‡∫á',
        'description': '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫Ω‡∫á‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡ªÇ‡∫î‡∫ç‡∫Å‡∫ª‡∫á',
        'details': '‡ªÅ‡∫ï‡∫∞‡∫õ‡∫∏‡ªà‡∫°‡ªÑ‡∫°‡ªÇ‡∫Ñ‡∫£‡ªÇ‡∫ü‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å 8 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ. ‡∫´‡∫º‡∫¥‡ªâ‡∫ô‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡ªÉ‡∫´‡ªâ‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫ñ‡∫∑‡∫≠‡∫∏‡∫õ‡∫∞‡∫Å‡∫≠‡∫ô‡ªÉ‡∫´‡ªâ‡ªù‡∫±‡ªâ‡∫ô‡∫Ñ‡∫ª‡∫á.',
        'color': Colors.red,
        'image': 'üéôÔ∏è',
      },
      {
        'icon': Icons.upload_file,
        'title': '‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡ªÑ‡∫ü‡∫•‡ªå',
        'description': '‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÑ‡∫ü‡∫•‡ªå‡∫™‡∫Ω‡∫á‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫¢‡∫π‡ªà‡ªÅ‡∫•‡ªâ‡∫ß',
        'details': '‡∫ó‡∫≤‡∫á‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫≠‡∫∑‡ªà‡∫ô: ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÑ‡∫ü‡∫•‡ªå WAV ‡∫´‡∫º‡∫∑ MP3 ‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö. ‡∫Ç‡∫∞‡ªú‡∫≤‡∫î‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î 10MB, ‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥ 10 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ.',
        'color': Colors.orange,
        'image': 'üìÅ',
      },
      {
        'icon': Icons.analytics,
        'title': '‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞',
        'description': 'AI ‡∫à‡∫∞‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡ªÅ‡∫•‡∫∞‡∫™‡∫ª‡ªà‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫±‡∫ö‡∫°‡∫≤',
        'details': '‡ªÅ‡∫≠‡∫±‡∫ö‡∫à‡∫∞‡∫™‡∫ª‡ªà‡∫á‡∫™‡∫Ω‡∫á‡ªÑ‡∫õ‡∫´‡∫≤ server, AI ‡∫à‡∫∞‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡ªÅ‡∫•‡∫∞‡∫™‡∫ª‡ªà‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫≥‡ªÅ‡∫ô‡∫Å‡∫û‡ªâ‡∫≠‡∫°‡∫•‡∫∞‡∫î‡∫±‡∫ö‡∫Ñ‡∫ß‡∫≤‡∫°‡ªù‡∫±‡ªâ‡∫ô‡ªÉ‡∫à‡∫Å‡∫±‡∫ö‡∫°‡∫≤.',
        'color': Colors.green,
        'image': 'ü§ñ',
      },
    ];

    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [AppColors.primaryBlue, AppColors.primaryRed],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(15),
                  ),
                  child: const Icon(
                    Icons.school,
                    color: Colors.white,
                    size: 28,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        LocaleKeys.guide_tutorial_title.tr(),
                        style: const TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        '‡∫Ñ‡∫≥‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô‡ªÅ‡∫≠‡∫±‡∫ö',
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.white.withOpacity(0.9),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // Progress indicator
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
            child: Row(
              children: [
                Expanded(
                  child: LinearProgressIndicator(
                    value: (_currentTutorialStep + 1) / steps.length,
                    backgroundColor: Colors.grey[200],
                    valueColor: const AlwaysStoppedAnimation<Color>(AppColors.primaryBlue),
                    minHeight: 6,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  '${_currentTutorialStep + 1}/${steps.length}',
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: AppColors.darkGrey,
                  ),
                ),
              ],
            ),
          ),

          // Current step content
          AnimatedSwitcher(
            duration: const Duration(milliseconds: 300),
            child: Container(
              key: ValueKey(_currentTutorialStep),
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  // Step visual
                  Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      color: (steps[_currentTutorialStep]['color'] as Color).withOpacity(0.1),
                      shape: BoxShape.circle,
                      border: Border.all(
                        color: steps[_currentTutorialStep]['color'] as Color,
                        width: 3,
                      ),
                    ),
                    child: Center(
                      child: Text(
                        steps[_currentTutorialStep]['image'] as String,
                        style: const TextStyle(fontSize: 48),
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  
                  // Step number
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: steps[_currentTutorialStep]['color'] as Color,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      '‡∫Ç‡∫±‡ªâ‡∫ô‡∫ï‡∫≠‡∫ô‡∫ó‡∫µ ${_currentTutorialStep + 1}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  
                  // Step title
                  Text(
                    steps[_currentTutorialStep]['title'] as String,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: AppColors.darkGrey,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 12),
                  
                  // Step description
                  Text(
                    steps[_currentTutorialStep]['description'] as String,
                    style: const TextStyle(
                      fontSize: 16,
                      color: AppColors.grey,
                      height: 1.5,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  
                  // Detailed explanation
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[50],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[200]!),
                    ),
                    child: Text(
                      steps[_currentTutorialStep]['details'] as String,
                      style: const TextStyle(
                        fontSize: 14,
                        color: AppColors.darkGrey,
                        height: 1.4,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Navigation buttons
          Container(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                if (_currentTutorialStep > 0)
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: () {
                        setState(() {
                          _currentTutorialStep--;
                        });
                      },
                      icon: const Icon(Icons.arrow_back),
                      label: const Text('‡∫Å‡ªà‡∫≠‡∫ô‡ªú‡ªâ‡∫≤'),
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                  ),
                if (_currentTutorialStep > 0) const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      if (_currentTutorialStep < steps.length - 1) {
                        setState(() {
                          _currentTutorialStep++;
                        });
                      } else {
                        _showTutorialCompleted();
                      }
                    },
                    icon: Icon(_currentTutorialStep < steps.length - 1 
                      ? Icons.arrow_forward 
                      : Icons.check),
                    label: Text(_currentTutorialStep < steps.length - 1 
                      ? '‡∫ï‡ªç‡ªà‡ªÑ‡∫õ' 
                      : '‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: steps[_currentTutorialStep]['color'] as Color,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecordVsImportChoice() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: AppColors.primaryGold.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.compare_arrows,
                  color: AppColors.primaryGold,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              const Text(
                'üéØ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ß‡∫¥‡∫ó‡∫µ‡∫Å‡∫≤‡∫ô‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.darkGrey,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          const Text(
            '‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫Ñ‡∫ß‡∫ô‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ß‡∫¥‡∫ó‡∫µ‡∫Å‡∫≤‡∫ô‡ªÉ‡∫î‡∫ß‡∫¥‡∫ó‡∫µ‡∫Å‡∫≤‡∫ô‡ªú‡∫∂‡ªà‡∫á:',
            style: TextStyle(
              fontSize: 16,
              color: AppColors.darkGrey,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 16),
          
          // Record option
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.red[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.red[200]!),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.red,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(Icons.mic, color: Colors.white, size: 20),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'üéôÔ∏è ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫Ω‡∫á‡ªÇ‡∫î‡∫ç‡∫Å‡∫ª‡∫á (‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥)',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        '‚Ä¢ ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡ªÅ‡∫≠‡∫±‡∫ö‡ªÇ‡∫î‡∫ç‡∫Å‡∫ª‡∫á\n‚Ä¢ ‡∫Ñ‡∫∏‡∫ô‡∫ô‡∫∞‡∫û‡∫≤‡∫ö‡∫î‡∫µ‡∫Å‡∫ß‡ªà‡∫≤\n‚Ä¢ ‡ªÅ‡∫≠‡∫±‡∫ö‡∫Ñ‡∫ß‡∫ö‡∫Ñ‡∫∏‡∫°‡ªÑ‡∫î‡ªâ‡∫î‡∫µ‡∫Å‡∫ß‡ªà‡∫≤',
                        style: TextStyle(
                          fontSize: 12,
                          color: AppColors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 12),
          
          // Import option
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.orange[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.orange[200]!),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(Icons.upload_file, color: Colors.white, size: 20),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'üìÅ ‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡ªÑ‡∫ü‡∫•‡ªå‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡ªÅ‡∫•‡ªâ‡∫ß',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        '‚Ä¢ ‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫ü‡∫•‡ªå WAV, MP3 ‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡ªÅ‡∫•‡ªâ‡∫ß\n‚Ä¢ ‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î 10MB\n‚Ä¢ ‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥ 10 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ',
                        style: TextStyle(
                          fontSize: 12,
                          color: AppColors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInternetRequirementCard() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.blue[50]!,
            Colors.blue[100]!,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.blue[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.blue,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.wifi,
                  color: Colors.white,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              const Text(
                'üåê ‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.darkGrey,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          const Text(
            '‡ªÅ‡∫≠‡∫±‡∫ö‡∫ô‡∫µ‡ªâ‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡ªÄ‡∫û‡∫∑‡ªà‡∫≠:',
            style: TextStyle(
              fontSize: 16,
              color: AppColors.darkGrey,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 12),
          _buildRequirementItem('üì§', '‡∫™‡∫ª‡ªà‡∫á‡ªÑ‡∫ü‡∫•‡ªå‡∫™‡∫Ω‡∫á‡ªÑ‡∫õ‡∫´‡∫≤ AI Server'),
          _buildRequirementItem('ü§ñ', '‡ªÉ‡∫ä‡ªâ AI ‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫õ‡∫∞‡∫™‡∫¥‡∫î‡∫ó‡∫¥‡∫û‡∫≤‡∫ö‡∫™‡∫π‡∫á'),
          _buildRequirementItem('üì•', '‡∫Æ‡∫±‡∫ö‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡∫Å‡∫±‡∫ö‡∫°‡∫≤'),
          _buildRequirementItem('‚òÅÔ∏è', '‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡ªÇ‡∫°‡ªÄ‡∫î‡∫• AI ‡ªÉ‡ªù‡ªà'),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue[600],
              borderRadius: BorderRadius.circular(10),
            ),
            child: const Row(
              children: [
                Icon(Icons.info_outline, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    'WiFi ‡∫´‡∫º‡∫∑ Mobile Data ‡∫ó‡∫±‡∫á‡∫Ñ‡∫π‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫î‡ªâ',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRequirementItem(String emoji, String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          Text(emoji, style: const TextStyle(fontSize: 18)),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              text,
              style: const TextStyle(
                fontSize: 14,
                color: AppColors.darkGrey,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBestPracticesCard() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppColors.primaryGold.withOpacity(0.1),
            AppColors.primaryRed.withOpacity(0.05),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: AppColors.primaryGold.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: AppColors.primaryGold.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.lightbulb_outline,
                  color: AppColors.primaryGold,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              const Text(
                'üí° ‡ªÄ‡∫Ñ‡∫±‡∫î‡∫•‡∫±‡∫ö‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫ú‡∫ª‡∫ô‡∫•‡∫±‡∫ö‡∫ó‡∫µ‡ªà‡∫î‡∫µ',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.darkGrey,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          _buildTipItem('üîá', '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÉ‡∫ô‡∫ö‡ªà‡∫≠‡∫ô‡∫á‡∫Ω‡∫ö', '‡∫™‡∫Ω‡∫á‡∫•‡∫ª‡∫ö‡∫Å‡∫ß‡∫ô‡∫à‡∫∞‡∫°‡∫µ‡∫ú‡∫ª‡∫ô‡∫Å‡∫∞‡∫ó‡∫ª‡∫ö‡∫ï‡ªç‡ªà‡∫Ñ‡∫ß‡∫≤‡∫°‡ªÅ‡∫°‡ªà‡∫ô‡∫ç‡ªç‡∫≤'),
          _buildTipItem('üìè', '‡ªÑ‡∫•‡∫ç‡∫∞‡∫ó‡∫≤‡∫á‡∫ó‡∫µ‡ªà‡ªÄ‡ªù‡∫≤‡∫∞‡∫™‡∫ª‡∫°', '‡∫ñ‡∫∑‡∫≠‡∫∏‡∫õ‡∫∞‡∫Å‡∫≠‡∫ô‡∫´‡ªà‡∫≤‡∫á‡∫à‡∫≤‡∫Å‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ 30-50 ‡∫ä‡∫±‡∫á‡∫ï‡∫µ‡ªÅ‡∫°‡∫±‡∫î'),
          _buildTipItem('‚è±Ô∏è', '‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡ªù‡∫≤‡∫∞‡∫™‡∫ª‡∫°', '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å 8 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡∫ó‡∫µ‡ªà‡∫î‡∫µ‡∫ó‡∫µ‡ªà‡∫™‡∫∏‡∫î'),
          _buildTipItem('üéµ', '‡∫´‡∫º‡∫¥‡ªâ‡∫ô‡ªÉ‡∫´‡ªâ‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô', '‡ªÉ‡∫´‡ªâ‡∫™‡∫Ω‡∫á‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡ªÑ‡∫î‡ªâ‡∫ç‡∫¥‡∫ô‡∫ä‡∫±‡∫î ‡ªÅ‡∫•‡∫∞ ‡∫î‡∫±‡∫á‡∫û‡ªç'),
          _buildTipItem('üì∂', '‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡∫î‡∫µ', '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡∫Å‡ªà‡∫≠‡∫ô‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞'),
        ],
      ),
    );
  }

  Widget _buildTipItem(String emoji, String title, String description) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.7),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        children: [
          Text(emoji, style: const TextStyle(fontSize: 20)),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                    color: AppColors.darkGrey,
                  ),
                ),
                Text(
                  description,
                  style: const TextStyle(
                    fontSize: 12,
                    color: AppColors.grey,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFaqTab() {
    final faqs = [
      {
        'question': '‡∫ç‡ªâ‡∫≠‡∫ô‡∫´‡∫ç‡∫±‡∫á‡ªÅ‡∫≠‡∫±‡∫ö‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡ªÑ‡∫î‡ªâ?',
        'answer': '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î ‡ªÅ‡∫•‡∫∞ ‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà',
        'icon': Icons.wifi_off,
        'color': Colors.red,
        'solutions': [
          '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö WiFi ‡∫´‡∫º‡∫∑ Mobile Data',
          '‡∫•‡∫≠‡∫á‡∫õ‡∫¥‡∫î‡ªÄ‡∫õ‡∫µ‡∫î‡ªÅ‡∫≠‡∫±‡∫ö‡ªÉ‡ªù‡ªà',
          '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫°‡∫µ‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡∫î‡∫µ‡∫´‡∫º‡∫∑‡∫ö‡ªç‡ªà',
          '‡∫•‡∫≠‡∫á‡ªÉ‡∫ä‡ªâ‡ªÄ‡∫Ñ‡∫∑‡∫≠‡∫Ç‡ªà‡∫≤‡∫ç‡∫≠‡∫∑‡ªà‡∫ô',
        ],
      },
      {
        'question': '‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡ªÉ‡∫ä‡ªâ‡ªÄ‡∫ß‡∫•‡∫≤‡∫ô‡∫≤‡∫ô‡ªÄ‡∫Å‡∫µ‡∫ô‡ªÑ‡∫õ?',
        'answer': '‡∫≠‡∫≤‡∫î‡ªÄ‡∫õ‡∫±‡∫ô‡ªÄ‡∫û‡∫≤‡∫∞‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡∫ä‡ªâ‡∫≤',
        'icon': Icons.hourglass_empty,
        'color': Colors.orange,
        'solutions': [
          '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Ñ‡∫ß‡∫≤‡∫°‡ªÑ‡∫ß‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î',
          '‡∫•‡∫∞‡∫ç‡∫∞‡ªÄ‡∫ß‡∫•‡∫≤‡∫õ‡∫ª‡∫Å‡∫Å‡∫∞‡∫ï‡∫¥ 10-30 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ',
          '‡∫´‡∫º‡∫µ‡∫Å‡ªÄ‡∫ß‡∫±‡ªâ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÉ‡∫ä‡ªâ‡∫≠‡∫¥‡∫ô‡ªÄ‡∫ï‡∫µ‡ªÄ‡∫ô‡∫±‡∫î‡ªÅ‡∫ö‡∫ö‡∫´‡∫º‡∫≤‡∫ç app',
          '‡∫•‡∫ª‡∫á‡∫≠‡∫≤‡∫î‡∫ï‡ªâ‡∫≠‡∫á‡∫•‡ªç 1-2 ‡∫ô‡∫≤‡∫ó‡∫µ‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫ô‡∫ç‡∫≤‡∫ô‡∫≠‡ªà‡∫≠‡∫ô',
        ],
      },
      {
        'question': '‡∫Ñ‡∫ß‡∫≤‡∫°‡ªÅ‡∫°‡ªà‡∫ô‡∫ç‡ªç‡∫≤‡∫ï‡ªà‡∫≥ - ‡ªÅ‡∫Å‡ªâ‡ªÅ‡∫ô‡∫ß‡ªÉ‡∫î?',
        'answer': '‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á‡∫Ñ‡∫∏‡∫ô‡∫ô‡∫∞‡∫û‡∫≤‡∫ö‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å ‡ªÅ‡∫•‡∫∞ ‡∫™‡∫∞‡∫û‡∫≤‡∫ö‡ªÅ‡∫ß‡∫î‡∫•‡ªâ‡∫≠‡∫°',
        'icon': Icons.verified,
        'color': Colors.blue,
        'solutions': [
          '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÉ‡∫ô‡∫ö‡ªà‡∫≠‡∫ô‡∫á‡∫Ω‡∫ö‡∫ó‡∫µ‡ªà‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫Ω‡∫á‡∫•‡∫ª‡∫ö‡∫Å‡∫ß‡∫ô',
          '‡∫ñ‡∫∑‡∫≠‡∫∏‡∫õ‡∫∞‡∫Å‡∫≠‡∫ô‡ªÑ‡∫ß‡∫ç‡∫∞‡∫´‡ªà‡∫≤‡∫á‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ 30-50cm',
          '‡∫´‡∫º‡∫¥‡ªâ‡∫ô‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡ªÉ‡∫´‡ªâ‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫î‡∫±‡∫á‡∫û‡ªç',
          '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ö 8 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ‡∫¢‡ªà‡∫≤‡∫á‡∫ï‡ªç‡ªà‡ªÄ‡∫ô‡∫∑‡ªà‡∫≠‡∫á',
        ],
      },
      {
        'question': '‡ªÑ‡∫ü‡∫•‡ªå‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î?',
        'answer': '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Ç‡∫∞‡ªú‡∫≤‡∫î ‡ªÅ‡∫•‡∫∞ ‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡ªÑ‡∫ü‡∫•‡ªå',
        'icon': Icons.file_upload,
        'color': Colors.purple,
        'solutions': [
          '‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫ü‡∫•‡ªå WAV ‡∫´‡∫º‡∫∑ MP3 ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô',
          '‡∫Ç‡∫∞‡ªú‡∫≤‡∫î‡ªÑ‡∫ü‡∫•‡ªå‡∫ö‡ªç‡ªà‡ªÄ‡∫Å‡∫µ‡∫ô 10MB',
          '‡ªÅ‡∫ô‡∫∞‡∫ô‡∫≥‡ªÑ‡∫ü‡∫•‡ªå‡∫™‡∫±‡ªâ‡∫ô‡∫Å‡∫ß‡ªà‡∫≤ 10 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ',
          '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÑ‡∫ü‡∫•‡ªå‡∫ö‡ªç‡ªà‡ªÄ‡∫™‡∫ç‡∫´‡∫≤‡∫ç',
        ],
      },
      {
        'question': '‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫ß‡∫¥‡ªÄ‡∫Ñ‡∫≤‡∫∞‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á?',
        'answer': 'AI ‡∫≠‡∫≤‡∫î‡∫à‡∫≥‡ªÅ‡∫ô‡∫Å‡∫ú‡∫¥‡∫î‡ªÄ‡∫ô‡∫∑‡ªà‡∫≠‡∫á‡∫à‡∫≤‡∫Å‡∫Ñ‡∫∏‡∫ô‡∫ô‡∫∞‡∫û‡∫≤‡∫ö‡∫™‡∫Ω‡∫á',
        'icon': Icons.error_outline,
        'color': Colors.teal,
        'solutions': [
          '‡∫•‡∫≠‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÉ‡ªù‡ªà‡ªÉ‡∫ô‡∫™‡∫∞‡∫û‡∫≤‡∫ö‡ªÅ‡∫ß‡∫î‡∫•‡ªâ‡∫≠‡∫°‡∫ó‡∫µ‡ªà‡∫î‡∫µ‡∫Å‡∫ß‡ªà‡∫≤',
          '‡ªÉ‡∫´‡ªâ‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ß‡ªà‡∫≤‡∫°‡∫µ‡∫™‡∫Ω‡∫á‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡∫¢‡ªà‡∫≤‡∫á‡∫î‡∫Ω‡∫ß',
          '‡∫´‡∫º‡∫µ‡∫Å‡ªÄ‡∫ß‡∫±‡ªâ‡∫ô‡∫™‡∫Ω‡∫á‡∫•‡∫ª‡∫ö‡∫Å‡∫ß‡∫ô‡∫à‡∫≤‡∫Å‡ªÅ‡∫´‡∫º‡ªà‡∫á‡∫≠‡∫∑‡ªà‡∫ô',
          'AI ‡∫à‡∫∞‡ªÅ‡∫°‡ªà‡∫ô‡∫ç‡ªç‡∫≤‡∫Å‡∫ß‡ªà‡∫≤‡∫ñ‡ªâ‡∫≤‡∫°‡∫µ‡∫™‡∫Ω‡∫á‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô',
        ],
      },
    ];

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [AppColors.primaryGold, AppColors.primaryRed],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              children: [
                const Icon(
                  Icons.help_outline,
                  color: Colors.white,
                  size: 48,
                ),
                const SizedBox(height: 16),
                Text(
                  LocaleKeys.guide_faq_title.tr(),
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '‡∫Ñ‡ªç‡∫≤‡∫ï‡∫≠‡∫ö‡∫™‡ªç‡∫≤‡∫•‡∫±‡∫ö‡∫Ñ‡ªç‡∫≤‡∫ñ‡∫≤‡∫°‡∫ó‡∫µ‡ªà‡∫û‡∫ª‡∫ö‡ªÄ‡∫õ‡∫±‡∫ô‡∫õ‡∫∞‡∫à‡ªç‡∫≤',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white.withOpacity(0.9),
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
          const SizedBox(height: 20),
          ...faqs.map((faq) => _buildFaqCard(faq)).toList(),
        ],
      ),
    );
  }

  Widget _buildFaqCard(Map<String, dynamic> faq) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: ExpansionTile(
        leading: Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: (faq['color'] as Color).withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Icon(
            faq['icon'] as IconData,
            color: faq['color'] as Color,
            size: 24,
          ),
        ),
        title: Text(
          faq['question'] as String,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: (faq['color'] as Color).withOpacity(0.05),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: (faq['color'] as Color).withOpacity(0.2),
                    ),
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.lightbulb_outline,
                        color: faq['color'] as Color,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          faq['answer'] as String,
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: AppColors.darkGrey,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),
                const Text(
                  '‡∫ß‡∫¥‡∫ó‡∫µ‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫ó‡∫µ‡∫•‡∫∞:',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                    color: AppColors.darkGrey,
                  ),
                ),
                const SizedBox(height: 8),
                ...(faq['solutions'] as List<String>).asMap().entries.map(
                  (entry) => Padding(
                    padding: const EdgeInsets.only(bottom: 8),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Container(
                          width: 24,
                          height: 24,
                          decoration: BoxDecoration(
                            color: faq['color'] as Color,
                            shape: BoxShape.circle,
                          ),
                          child: Center(
                            child: Text(
                              '${entry.key + 1}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: Text(
                            entry.value,
                            style: const TextStyle(
                              fontSize: 14,
                              color: AppColors.darkGrey,
                              height: 1.4,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showTutorialCompleted() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  colors: [AppColors.primaryGold, AppColors.primaryRed],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.celebration,
                color: Colors.white,
                size: 48,
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'üéâ ‡∫Ç‡ªç‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ç‡∫¥‡∫ô‡∫î‡∫µ!',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.darkGrey,
              ),
            ),
            const SizedBox(height: 12),
            const Text(
              '‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤‡ªÑ‡∫î‡ªâ‡∫Æ‡∫Ω‡∫ô‡∫à‡∫ª‡∫ö‡∫ö‡∫ª‡∫î‡∫Æ‡∫Ω‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß!\n‡∫û‡ªâ‡∫≠‡∫°‡∫ó‡∫µ‡ªà‡∫à‡∫∞‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫à‡∫≥‡ªÅ‡∫ô‡∫Å‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫î‡∫ª‡∫ô‡∫ï‡∫µ‡∫•‡∫≤‡∫ß.',
              style: TextStyle(
                fontSize: 16,
                color: AppColors.grey,
                height: 1.5,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () {
                      Navigator.of(context).pop();
                      setState(() {
                        _currentTutorialStep = 0;
                      });
                    },
                    icon: const Icon(Icons.replay),
                    label: const Text('‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡ªÉ‡ªù‡ªà'),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      Navigator.of(context).pop();
                      // Navigate to recording screen
                      context.router.pushAndPopUntil(
                        const MainNavigationRoute(),
                        predicate: (route) => false,
                      );
                    },
                    icon: const Icon(Icons.mic),
                    label: const Text('‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.primaryBlue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}